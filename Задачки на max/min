
---

### **1. Максимальное из трех чисел**
```python
def max_of_three(a, b, c):
    return max(a, b, c)

print(max_of_three(10, 25, 15))  # 25
```

---

### **2. Минимальное из списка**
```python
def min_of_list(lst):
    return min(lst)

print(min_of_list([5, 2, 8, 1, 9]))  # 1
```

---

### **3. Максимальный элемент в матрице**
```python
def max_in_matrix(matrix):
    return max(max(row) for row in matrix)

matrix = [
    [3, 5, 7],
    [2, 8, 6],
    [9, 4, 1]
]
print(max_in_matrix(matrix))  # 9
```

---

### **4. Второй максимум**
```python
def second_max(lst):
    first, second = float('-inf'), float('-inf')
    for num in lst:
        if num > first:
            second, first = first, num
        elif num > second and num != first:
            second = num
    return second if second != float('-inf') else None

print(second_max([10, 20, 5, 8]))  # 10
```

---

### **5. Разница между макс и мин**
```python
def max_min_difference(lst):
    return max(lst) - min(lst)

print(max_min_difference([10, 2, 5, 8]))  # 8
```

---

### **6. Максимальная сумма пары**
```python
def max_sum_pair(lst):
    lst.sort()
    return lst[-1] + lst[-2]

print(max_sum_pair([3, 5, 1, 9, 2]))  # 14 (9 + 5)
```

---

### **7. Максимальная сумма подмассива (Алгоритм Кадане)**
```python
def max_subarray_sum(arr):
    max_sum = current_sum = arr[0]
    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum

print(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))  # 6 (подмассив [4, -1, 2, 1])
```

---

### **8. Максимальное произведение пары**
```python
def max_product_pair(lst):
    lst.sort()
    return max(lst[-1] * lst[-2], lst[0] * lst[1])

print(max_product_pair([-10, -3, 5, 6, -2]))  # 30 (5 * 6)
```

---

### **9. k-й по величине элемент**
```python
import heapq

def kth_largest(lst, k):
    return heapq.nlargest(k, lst)[-1]

print(kth_largest([3, 1, 5, 8, 2], 2))  # 5 (второй по величине)
```

---

### **10. Максимальный элемент в двоичном дереве**
```python
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def max_in_bst(root):
    if not root:
        return float('-inf')
    return max(root.value, max_in_bst(root.left), max_in_bst(root.right))

# Пример дерева
root = TreeNode(10)
root.left = TreeNode(5)
root.right = TreeNode(15)
root.left.left = TreeNode(2)
root.left.right = TreeNode(7)

print(max_in_bst(root))  # 15
```



